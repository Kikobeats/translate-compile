{"name":"translate-compile","tagline":"angular-translate angular pre-compiler markup translate-compile grunt plugin","body":"### This doc is being updated to better describe TL markup language.\r\n\r\n# grunt-translate-compile\r\n\r\n> A pre-compiler for angular-translate based on TL, a simple write-less markup designed for angular-translate.\r\n> \r\n> [Checkout The Translation Markup](#user-content-translation-markup---tl)\r\n\r\n## Getting Started\r\nThis plugin requires Grunt `~0.4.5`\r\n\r\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\r\n\r\n```shell\r\nnpm install grunt-translate-compile --save-dev\r\n```\r\n\r\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\r\n\r\n```js\r\ngrunt.loadNpmTasks('grunt-translate-compile');\r\n```\r\n\r\n## Translation Markup - TL\r\n\r\nThe translation markup intends to drastically reduce the amount of typing needed to translate your app, by keeping it simpler and improving it's maintenance.\r\nTo learn more about the TL markup, [please refer to the full documentation](http://cainaf.github.io/translate-compile).\r\n\r\nBriefing: A translation file begins with the declaration of all supported languages of your application. A custom numeric code (key) must be assigned to each one of the declared languages. In the sample that comes next, we're saying that [american english code is 1], [brazilian portuguese is 2] and [spanish from spain is 3]. Translation values are assigned directly to the language key.\r\n\r\nHere goes a sample TL markup code:\r\n\r\n```js\r\nLANGUAGES\r\n  1:enUs\r\n  2:ptBr\r\n  3:esEs\r\n\r\nMENU\r\n  USER\r\n    LABEL\r\n      1:User\r\n      2:Usu치rio\r\n      3:Usuario\r\n    DROPDOWN\r\n      EDIT\r\n        1:Edit\r\n        2,3:Editar\r\n      LOGOUT\r\n        1:Logout\r\n        2:Sair\r\n        3:Finalizar la Sesi칩n\r\n  CART\r\n    EMPTY\r\n      1:Empty Cart\r\n      2:Esvaziar Carrinho\r\n      3:Vaciar Carrito\r\n    CHECKOUT\r\n      1:Checkout\r\n      2:Fechar Pedido\r\n      3:Realizar Pedido\r\n```\r\n\r\nCompiling the above will result the bellow:\r\n\r\n```js\r\nvar angTranslations = {\r\n  \"enUs\": {\r\n    \"MENU\": {\r\n      \"USER\": {\r\n        \"LABEL\": \"User\",\r\n        \"DROPDOWN\": {\r\n          \"EDIT\": \"Edit\",\r\n          \"LOGOUT\": \"Logout\"\r\n        }\r\n      },\r\n      \"CART\": {\r\n        \"EMPTY\": \"Empty Cart\",\r\n        \"CHECKOUT\": \"Checkout\"\r\n      }\r\n    }\r\n  },\r\n  \"ptBr\": {\r\n    \"MENU\": {\r\n      \"USER\": {\r\n        \"LABEL\": \"Usu치rio\",\r\n        \"DROPDOWN\": {\r\n          \"EDIT\": \"Editar\",\r\n          \"LOGOUT\": \"Sair\"\r\n        }\r\n      },\r\n      \"CART\": {\r\n        \"EMPTY\": \"Esvaziar Carrinho\",\r\n        \"CHECKOUT\": \"Fechar Pedido\"\r\n      }\r\n    }\r\n  },\r\n  \"esEs\": {\r\n    \"MENU\": {\r\n      \"USER\": {\r\n        \"LABEL\": \"Usuario\",\r\n        \"DROPDOWN\": {\r\n          \"EDIT\": \"Editar\",\r\n          \"LOGOUT\": \"Finalizar la Sesi칩n\"\r\n        }\r\n      },\r\n      \"CART\": {\r\n        \"EMPTY\": \"Vaciar Carrito\",\r\n        \"CHECKOUT\": \"Realizar Pedido\"\r\n      }\r\n    }\r\n  }\r\n};\r\n```\r\nNotice how the writing was significantly reduced as it's no longer needed to rewrite every key for each language, we are also skipping blocks and quotes. Thus we can focus in what really matters, the translations. Maintenance is also greatly improved, as adding a new key will no longer be a hunt for the right spot of each language.\r\nEqual translations are also single written as multiple language keys may be assigned to a value (checkout 'user.dropdown.edit' key).\r\n\r\n**Please refer to the [full documentation](http://cainaf.github.io/translate-compile) for more examples and capabilities.**\r\n\r\n## The \"translate_compile\" task\r\n\r\n### Overview\r\n\r\n#### 1. Add the task\r\nIn your project's Gruntfile, add a section named `translate_compile` to the data object passed into `grunt.initConfig()`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  translate_compile: {\r\n    compile: {\r\n      options: {\r\n        // task-specific options go here. refer to options topic\r\n      },\r\n      files: {\r\n        // post-compiling file to the left, pre-compiling files to the right\r\n        'compiled-translations.js': ['translations/*.tl']\r\n      }\r\n    }\r\n  }\r\n});\r\n```\r\n#### 2. Let your server know about it\r\nRemember to include \"translate_compile\" inside your server task so the compilation takes place when you start it (connect/express). Something like:\r\n\r\n```js\r\ngrunt.registerTask('serve', function (target) {\r\n    grunt.task.run([\r\n      'clean:server',\r\n      'translate_compile:compile', // <-- here it is\r\n      'bowerInstall',\r\n      'concurrent:server',\r\n      'autoprefixer',\r\n      'connect:livereload',\r\n      'watch'\r\n    ]);\r\n  });\r\n```\r\n\r\n#### 3. Watch it\r\nFor a better experience, watch for any changes made to your translation files (requires [grunt-contrib-watch](https://github.com/gruntjs/grunt-contrib-watch)). Something like:\r\n```js\r\nwatch: {\r\n  tl: {\r\n    files: ['translations/*.tl'],\r\n    tasks: ['translate_compile:compile'],\r\n    options: {\r\n      livereload: true\r\n    }\r\n  }\r\n},\r\n```\r\n\r\n#### 4. Take it to your build\r\nAdd the \"translate_compile\" to your build task. Something like:\r\n```js\r\ngrunt.registerTask('build', [\r\n    'clean:dist'\r\n    'bowerInstall',\r\n    'useminPrepare',\r\n    'concurrent:dist',\r\n    'autoprefixer',\r\n    'concat',\r\n    'ngmin',\r\n    'translate_compile:compile', // <-- here it is\r\n    'copy:dist',\r\n    'cdnify',\r\n    'cssmin',\r\n    'uglify',\r\n    'rev',\r\n    'usemin',\r\n    'htmlmin'\r\n  ]);\r\n```\r\n\r\n#### You should now be good to go!\r\n\r\n### Options\r\n\r\n#### options.translationVar\r\nType: `String`\r\nDefault value: `'angTranslations'`\r\n\r\nDetermines the name of the compiled variable. Ex: `var angTranslations = {\"usEn\":{...}}`\r\n\r\n#### options.multipleObjects\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nIf `multipleObjects` is set to `true` there will no longer be only one root variable like `angTranslations`. Translations will now be splitted into one object per language. Ex: `var enUs = {...}; var ptBr = {...}; var esEs = {...};` Variable names will the ones declared in the `LANGUAGES` section.\r\n\r\n#### options.asJson\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nShould this value be set to true there will be no variable assignment inside the file, only the resulting json will be there.\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\r\n\r\n## Release History\r\n_(Nothing yet)_","google":"UA-38498266-4","note":"Don't delete this file! It's used internally to help with page regeneration."}